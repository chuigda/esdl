extern var lexeme: token -> str
extern var push_array: <A>(list<A>, A) -> list<A>

type Ty(name: str)
type AttrItem(ident: str, args: list<AttrItem>)
type Field(attribute: list<AttrItem>, name: str, ty: Ty, optional: bool, repeated: bool)
type Ctor(attribute: list<AttrItem>, name: str, fields: list<Field>)
type Sort(attribute: list<AttrItem>, name: str, ctors: list<Ctor>, export: bool)

start : sorts { $1 }

sorts : sorts sort { push_array($1, $2) }
      | sort { [$1] }

sort : attr export <ID> ':' seplist('|', ctor) { Sort($1, lexeme($3), $5, $2) }
     | attr export <ID> '(' seplist(',', field) ')' { Sort($1, lexeme($3), [Ctor([], lexeme($3), $5)], $2) }

export : 'export' { true }
       | { false }

ctor : attr <ID> { Ctor($1, lexeme($2), []) }
     | attr <ID> '(' seplist(',', field) ')' { Ctor($1, lexeme($2), $4) }

field : attr <ID> ':' ty { Field($1, lexeme($2), $4, false, false) }
      | attr <ID> '?' ':' ty { Field($1, lexeme($2), $5, true, false) }
      | attr <ID> '*' ':' ty { Field($1, lexeme($2), $5, false, true) }

attr : '#[' seplist(',', attritem) ']' { $2 }
     | { [] }

attritem : <ID> { AttrItem(lexeme($1), []) }
         | <ID> '(' seplist(',', attritem) ')' { AttrItem(lexeme($1), $3) }

ty : <ID> { Ty(lexeme($1)) }

seplist(sep, elt) : elt { [$1] }
                  | seplist(sep, elt) sep elt { push_array($1, $3) }

UNICODE = [\u00ff-\ud7ff] | [\udfff-\uffff];
LETTER = [a-z] | [A-Z];
DIGIT = [0-9];

IDENTIFIER_HEAD = LETTER | UNICODE | '_';
IDENTIFIER_FOLLOW = IDENTIFIER_HEAD | DIGIT;
ID = IDENTIFIER_HEAD IDENTIFIER_FOLLOW*;

WS =  '\r' | '\n' | ' ' | '\t';

ignore WS
